esphome:
  name: upstairs_thermostat_control
  platform: ESP32
  board: featheresp32

<<: !include base.yaml

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pass

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Ttg Fallback Hotspot"
    password: "zvmjI13rzTGs"

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  - platform: esphome
    password: !secret ota_password
### CUSTOM!!

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO19

time:
  - platform: homeassistant
    id: esptime

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO35
      inverted: true
    id: tdisplay_button_input_1
    name: "Button 1"

  - platform: gpio
    pin:
      number: GPIO0
      inverted: true
    id: tdisplay_button_input_0
    name: "Button 0"

  - platform: status
    name: "Node Status"
    id: system_status     
    
  - platform: homeassistant
    id: heat_status
    name: "Heat Status"
    internal: true
    entity_id: switch.furnace_relay_15

sensor:
  - platform: homeassistant
    id: target_temp
    entity_id: sensor.upstairs_target_temperature
    name: "Target Temperature"
    internal: true

  - platform: homeassistant
    id: current_temp
    entity_id: sensor.living_room_thermometer_hygrometer_temperature
    name: "Current Temperature"
    internal: true
    
  - platform: homeassistant
    id: current_humidity
    entity_id: sensor.living_room_thermometer_hygrometer_humidity
    name: "Current Temperature"
    internal: true

  - platform: adc
    pin: 34
    attenuation: 11db
    name: VBatt
    id: vcc
    update_interval: 60s

  - platform: template
    name: batterylevel
    id: batterylevel
    unit_of_measurement: '%'
    update_interval: 60s
    lambda: |-
      // I know infering the battery from voltage only is misleading, but I'll take it. Considering linear decay (again, i'll take it), max=2.23, min=1.38
      float rval = ((id(vcc).state * 118) - 162);
      if (rval > 100.0) rval = 100.0;
      if (rval < 0.0) rval = 0.0;
      return rval;
      
# Define a PWM output on the ESP32
output:
  - platform: ledc
    pin: GPIO4
    id: backlight_pwm

# Define a monochromatic, dimmable light for the backlight
light:
  - platform: monochromatic
    output: backlight_pwm
    name: "Display Backlight"
    id: back_light
    restore_mode: ALWAYS_ON

# TODO brightness
display:
  - platform: ili9xxx
    model: st7789v
    #TTGO TDisplay 135x240
    dimensions:
      height: 240
      width: 135
      offset_height: 40
      offset_width: 52
    # Required or the colors are all inverted, and Black screen is White
    invert_colors: true
    cs_pin: GPIO5
    dc_pin: GPIO16
    reset_pin: GPIO23
    rotation: 0째
    update_interval: 100ms
    lambda: |-
      it.print(1, 1, id(font_arial_12), id(color_teal_blue), "Upstairs");
      it.printf(1, 21, id(font_bebas_74), id(color_white), "%.1f째", id(current_temp).state);
      it.printf(15, 94, id(font_bebas_56), id(color_white), "%.1f%%", id(current_humidity).state);
      
      if(id(heat_status).has_state()) {
        if (id(heat_status).state) {
          it.printf(42, 160, id(font_bebas_48), id(color_red), "%.0f째", id(target_temp).state);
        } else {
          it.printf(42, 160, id(font_bebas_48), id(color_teal_blue), "%.0f째", id(target_temp).state);
        }
      }
      it.printf(4, 228, id(font_arial_12), id(color_teal_blue), "%.2f%% (%.2fV)", id(batterylevel).state, id(vcc).state);
